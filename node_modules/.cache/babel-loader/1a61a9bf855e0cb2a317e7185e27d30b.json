{"ast":null,"code":"var _jsxFileName = \"/Users/sedonghwang/Desktop/react-tutorial/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport ToDoList from './Todolist';\nimport { v4 as uuidv4 } from 'uuid'; // creates a random id for id handling\n//\n// This application builds a to-do list.\n//\n// storage\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_KEY = 'todoApp.todos';\n\nfunction App() {\n  _s();\n\n  // when our app loads, we have an empty [] of todos\n  // todos: every single one of our todos inside of our todo state\n  // setTodos: assigning a new value?\n  const [todos, setTodos] = useState([]); // making this a variable to access whatever you type in\n\n  const todoName = useRef(); // uses it once since array is empty\n\n  useEffect(() => {\n    const storedTodos = localStorage.getItem(LOCAL_STORAGE_KEY);\n    setTodos(storedTodos);\n  }, []); // anytime anything in the array changes, the useEffect function gets called\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]); // add a handler in app\n\n  function addHandler(e) {\n    // whatever element we are currently referencing in our input!\n    const name = todoName.current.value;\n    if (name === '') return;\n    setTodos(prevTodos => {\n      return [...prevTodos, {\n        id: uuidv4(),\n        name: name,\n        complete: false\n      }];\n    }); // clears out input when handler is finished\n\n    todoName.current.value = null;\n  }\n\n  return (\n    /*#__PURE__*/\n    // code fragment so that we can have multiple HTML elements inside the App.js return\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ToDoList, {\n        todos: todos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: todoName,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addHandler,\n        children: \"Add ToDo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Clear Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"0 left to do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n_s(App, \"xUJllZcLK6/SBgFIao+MbochuYw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sedonghwang/Desktop/react-tutorial/src/App.js"],"names":["React","useState","useRef","useEffect","ToDoList","v4","uuidv4","LOCAL_STORAGE_KEY","App","todos","setTodos","todoName","storedTodos","localStorage","getItem","setItem","JSON","stringify","addHandler","e","name","current","value","prevTodos","id","complete"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B,C,CAAoC;AAEpC;AACA;AACA;AAEA;;;;AACA,MAAMC,iBAAiB,GAAG,eAA1B;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC,CAJa,CAMb;;AACA,QAAMU,QAAQ,GAAGT,MAAM,EAAvB,CAPa,CASb;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqBP,iBAArB,CAApB;AACAG,IAAAA,QAAQ,CAACE,WAAD,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT,CAVa,CAeb;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,YAAY,CAACE,OAAb,CAAqBR,iBAArB,EAAwCS,IAAI,CAACC,SAAL,CAAeR,KAAf,CAAxC;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CAhBa,CAoBb;;AACA,WAASS,UAAT,CAAoBC,CAApB,EAAuB;AACrB;AAEA,UAAMC,IAAI,GAAGT,QAAQ,CAACU,OAAT,CAAiBC,KAA9B;AACA,QAAIF,IAAI,KAAK,EAAb,EAAiB;AAEjBV,IAAAA,QAAQ,CAACa,SAAS,IAAI;AACpB,aAAO,CAAC,GAAGA,SAAJ,EAAe;AAAEC,QAAAA,EAAE,EAAElB,MAAM,EAAZ;AAAgBc,QAAAA,IAAI,EAAEA,IAAtB;AAA4BK,QAAAA,QAAQ,EAAE;AAAtC,OAAf,CAAP;AACD,KAFO,CAAR,CANqB,CAUrB;;AACAd,IAAAA,QAAQ,CAACU,OAAT,CAAiBC,KAAjB,GAAyB,IAAzB;AACD;;AAED;AAAA;AACE;AACA;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEb;AAAjB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,GAAG,EAAEE,QAAZ;AAAsB,QAAA,IAAI,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAEO,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAFF;AAUD;;GA7CQV,G;;KAAAA,G;AA+CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport ToDoList from './Todolist';\nimport { v4 as uuidv4 } from 'uuid' // creates a random id for id handling\n\n//\n// This application builds a to-do list.\n//\n\n// storage\nconst LOCAL_STORAGE_KEY = 'todoApp.todos'\n\nfunction App() {\n  // when our app loads, we have an empty [] of todos\n  // todos: every single one of our todos inside of our todo state\n  // setTodos: assigning a new value?\n  const [todos, setTodos] = useState([])\n\n  // making this a variable to access whatever you type in\n  const todoName = useRef() \n\n  // uses it once since array is empty\n  useEffect(() => {\n    const storedTodos = localStorage.getItem(LOCAL_STORAGE_KEY)\n    setTodos(storedTodos)\n  }, [])\n\n  // anytime anything in the array changes, the useEffect function gets called\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  }, [todos])\n\n  // add a handler in app\n  function addHandler(e) {\n    // whatever element we are currently referencing in our input!\n\n    const name = todoName.current.value\n    if (name === '') return\n\n    setTodos(prevTodos => {\n      return [...prevTodos, { id: uuidv4(), name: name, complete: false}]\n    })\n\n    // clears out input when handler is finished\n    todoName.current.value = null\n  }\n\n  return (\n    // code fragment so that we can have multiple HTML elements inside the App.js return\n    <> \n      <ToDoList todos={todos}/>\n      <input ref={todoName} type=\"text\" />\n      <button onClick={addHandler}>Add ToDo</button>\n      <button>Clear Completed</button>\n      <div>0 left to do</div>\n    </>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}