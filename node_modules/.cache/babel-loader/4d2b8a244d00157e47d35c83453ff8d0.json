{"ast":null,"code":"var _jsxFileName = \"/Users/sedonghwang/Desktop/react-tutorial/TodoList/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport ToDoList from './Todolist';\nimport { v4 as uuidv4 } from 'uuid'; // creates a random id for id handling\n\nimport './App.css'; //\n// This application builds a to-do list.\n//\n// storage\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LOCAL_STORAGE_KEY = 'todoApp.todos';\n\nfunction App() {\n  _s();\n\n  // when our app loads, we have an empty [] of todos\n  // todos: every single one of our todos inside of our todo state\n  // setTodos: assigning a new value?\n  // never modify this variable\n  const [todos, setTodos] = useState([]); // making this a variable to access whatever you type in\n\n  const todoName = useRef(); // uses it once since array is empty\n\n  useEffect(() => {\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storedTodos) setTodos(storedTodos);\n  }, []); // anytime anything in the array changes, the useEffect function gets called\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function clearHandler() {\n    const newTodos = todos.filter(todo => !todo.complete);\n    setTodos(newTodos);\n  }\n\n  function toggleHandler(id) {\n    // get a copy of the old list\n    const new_list = [...todos];\n    const todo = new_list.find(todo => todo.id === id);\n    todo.complete = !todo.complete;\n    setTodos(new_list);\n  } // add a handler in app\n\n\n  function addHandler(e) {\n    // whatever element we are currently referencing in our input!\n    const name = todoName.current.value;\n    if (name === '') return;\n    setTodos(prevTodos => {\n      return [...prevTodos, {\n        id: uuidv4(),\n        name: name,\n        complete: false\n      }];\n    }); // clears out input when handler is finished\n\n    todoName.current.value = null;\n  }\n\n  return (\n    /*#__PURE__*/\n    // code fragment so that we can have multiple HTML elements inside the App.js return\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"head\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"This is a TodoList\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"layout\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [todos.filter(todo => !todo.complete).length, \" left to do\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: todoName,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addHandler,\n          children: \"Add ToDo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearHandler,\n          children: \"Clear Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ToDoList, {\n          todos: todos,\n          toggleHandler: toggleHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n_s(App, \"xUJllZcLK6/SBgFIao+MbochuYw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sedonghwang/Desktop/react-tutorial/TodoList/src/App.js"],"names":["React","useState","useRef","useEffect","ToDoList","v4","uuidv4","LOCAL_STORAGE_KEY","App","todos","setTodos","todoName","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","clearHandler","newTodos","filter","todo","complete","toggleHandler","id","new_list","find","addHandler","e","name","current","value","prevTodos","length"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport ToDoList from './Todolist';\nimport { v4 as uuidv4 } from 'uuid'; // creates a random id for id handling\nimport './App.css';\n\n//\n// This application builds a to-do list.\n//\n\n// storage\nconst LOCAL_STORAGE_KEY = 'todoApp.todos'\n\nfunction App() {\n  // when our app loads, we have an empty [] of todos\n  // todos: every single one of our todos inside of our todo state\n  // setTodos: assigning a new value?\n  // never modify this variable\n  const [todos, setTodos] = useState([])\n\n  // making this a variable to access whatever you type in\n  const todoName = useRef() \n\n  // uses it once since array is empty\n  useEffect(() => {\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\n    if (storedTodos) setTodos(storedTodos) \n  }, [])\n\n  // anytime anything in the array changes, the useEffect function gets called\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  }, [todos])\n\n  function clearHandler() {\n    const newTodos = todos.filter(todo => !todo.complete)\n    setTodos(newTodos)\n  }\n\n  function toggleHandler(id) {\n    // get a copy of the old list\n    const new_list = [...todos]\n    const todo = new_list.find(todo => todo.id === id)\n    todo.complete = !todo.complete\n    setTodos(new_list)\n  }\n\n  // add a handler in app\n  function addHandler(e) {\n    // whatever element we are currently referencing in our input!\n\n    const name = todoName.current.value\n    if (name === '') return\n\n    setTodos(prevTodos => {\n      return [...prevTodos, { id: uuidv4(), name: name, complete: false}]\n    })\n\n    // clears out input when handler is finished\n    todoName.current.value = null\n  }\n\n  return (\n    // code fragment so that we can have multiple HTML elements inside the App.js return\n    <> \n      <div class=\"head\">\n        <h1>This is a TodoList</h1>\n      </div>\n      <div class=\"layout\">\n        <div>{todos.filter(todo => !todo.complete).length} left to do</div>\n        <input ref={todoName} type=\"text\" />\n        <button onClick={addHandler}>Add ToDo</button>\n        <button onClick={clearHandler}>Clear Completed</button>\n        <ToDoList todos={todos} toggleHandler={toggleHandler}/>\n      </div>\n    </>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}