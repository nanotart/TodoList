{"ast":null,"code":"var _jsxFileName = \"/Users/sedonghwang/Desktop/react-tutorial/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport ToDoList from './Todolist';\nimport { v4 as uuidv4 } from 'uuid'; // creates a random id\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // when our app loads, we have an empty [] of todos\n  // todos: every single one of our todos inside of our todo state\n  // setTodos: assigning a new value?\n  const [todos, setTodos] = useState([]); // making this a variable\n\n  const todoName = useRef();\n\n  function addHandler(e) {\n    // whatever element we are currently referencing in our input!\n    const name = todoName.current.value;\n    if (name === '') return;\n    setTodos(prevTodos => {\n      return [...prevTodos, {\n        id: 1,\n        name: name\n      }];\n    }); // clears out input when handler is finished\n\n    todoName.current.value = null;\n  }\n\n  return (\n    /*#__PURE__*/\n    // code fragment so that we can have multiple HTML elements inside the App.js return\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ToDoList, {\n        todos: todos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: todoName,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addHandler,\n        children: \"Add ToDo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Clear Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"0 left to do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n_s(App, \"vqHhDD5R2qds3COsYf3TkanYEUc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sedonghwang/Desktop/react-tutorial/src/App.js"],"names":["React","useState","useRef","ToDoList","v4","uuidv4","App","todos","setTodos","todoName","addHandler","e","name","current","value","prevTodos","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B,C,CAAoC;;;;;AAEpC,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC,CAJa,CAMb;;AACA,QAAMQ,QAAQ,GAAGP,MAAM,EAAvB;;AAEA,WAASQ,UAAT,CAAoBC,CAApB,EAAuB;AACrB;AAEA,UAAMC,IAAI,GAAGH,QAAQ,CAACI,OAAT,CAAiBC,KAA9B;AACA,QAAIF,IAAI,KAAK,EAAb,EAAiB;AAEjBJ,IAAAA,QAAQ,CAACO,SAAS,IAAI;AACpB,aAAO,CAAC,GAAGA,SAAJ,EAAe;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASJ,QAAAA,IAAI,EAAEA;AAAf,OAAf,CAAP;AACD,KAFO,CAAR,CANqB,CAUrB;;AACAH,IAAAA,QAAQ,CAACI,OAAT,CAAiBC,KAAjB,GAAyB,IAAzB;AACD;;AAED;AAAA;AACE;AACA;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEP;AAAjB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,GAAG,EAAEE,QAAZ;AAAsB,QAAA,IAAI,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAFF;AAUD;;GAjCQJ,G;;KAAAA,G;AAmCT,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport ToDoList from './Todolist';\nimport { v4 as uuidv4 } from 'uuid' // creates a random id\n\nfunction App() {\n  // when our app loads, we have an empty [] of todos\n  // todos: every single one of our todos inside of our todo state\n  // setTodos: assigning a new value?\n  const [todos, setTodos] = useState([])\n\n  // making this a variable\n  const todoName = useRef() \n\n  function addHandler(e) {\n    // whatever element we are currently referencing in our input!\n\n    const name = todoName.current.value\n    if (name === '') return\n\n    setTodos(prevTodos => {\n      return [...prevTodos, { id: 1, name: name,}]\n    })\n\n    // clears out input when handler is finished\n    todoName.current.value = null\n  }\n\n  return (\n    // code fragment so that we can have multiple HTML elements inside the App.js return\n    <> \n      <ToDoList todos={todos}/>\n      <input ref={todoName} type=\"text\" />\n      <button onClick={addHandler}>Add ToDo</button>\n      <button>Clear Completed</button>\n      <div>0 left to do</div>\n    </>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}