{"ast":null,"code":"var _jsxFileName = \"/Users/sedonghwang/Desktop/react-tutorial/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport ToDoList from './Todolist';\nimport { v4 as uuidv4 } from 'uuid'; // creates a random id for id handling\n//\n// This application builds a to-do list.\n//\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // when our app loads, we have an empty [] of todos\n  // todos: every single one of our todos inside of our todo state\n  // setTodos: assigning a new value?\n  const [todos, setTodos] = useState([]); // making this a variable to access whatever you type in\n\n  const todoName = useRef();\n  const LOCAL_STORAGE_KEY = 'todoApp.'; // anytime anything in the array changes, the useEffect function gets called\n\n  useEffect(() => {\n    localStorage.setItem();\n  }, [todos]); // add a handler in app\n\n  function addHandler(e) {\n    // whatever element we are currently referencing in our input!\n    const name = todoName.current.value;\n    if (name === '') return;\n    setTodos(prevTodos => {\n      return [...prevTodos, {\n        id: uuidv4(),\n        name: name,\n        complete: false\n      }];\n    }); // clears out input when handler is finished\n\n    todoName.current.value = null;\n  }\n\n  return (\n    /*#__PURE__*/\n    // code fragment so that we can have multiple HTML elements inside the App.js return\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ToDoList, {\n        todos: todos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: todoName,\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addHandler,\n        children: \"Add ToDo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Clear Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"0 left to do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n_s(App, \"TSt6/D4mOQbC8fQg8bi4fNdWzrE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sedonghwang/Desktop/react-tutorial/src/App.js"],"names":["React","useState","useRef","useEffect","ToDoList","v4","uuidv4","App","todos","setTodos","todoName","LOCAL_STORAGE_KEY","localStorage","setItem","addHandler","e","name","current","value","prevTodos","id","complete"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B,C,CAAoC;AAEpC;AACA;AACA;;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC,CAJa,CAMb;;AACA,QAAMS,QAAQ,GAAGR,MAAM,EAAvB;AAEA,QAAMS,iBAAiB,GAAG,UAA1B,CATa,CAWb;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,YAAY,CAACC,OAAb;AACD,GAFQ,EAEN,CAACL,KAAD,CAFM,CAAT,CAZa,CAgBb;;AACA,WAASM,UAAT,CAAoBC,CAApB,EAAuB;AACrB;AAEA,UAAMC,IAAI,GAAGN,QAAQ,CAACO,OAAT,CAAiBC,KAA9B;AACA,QAAIF,IAAI,KAAK,EAAb,EAAiB;AAEjBP,IAAAA,QAAQ,CAACU,SAAS,IAAI;AACpB,aAAO,CAAC,GAAGA,SAAJ,EAAe;AAAEC,QAAAA,EAAE,EAAEd,MAAM,EAAZ;AAAgBU,QAAAA,IAAI,EAAEA,IAAtB;AAA4BK,QAAAA,QAAQ,EAAE;AAAtC,OAAf,CAAP;AACD,KAFO,CAAR,CANqB,CAUrB;;AACAX,IAAAA,QAAQ,CAACO,OAAT,CAAiBC,KAAjB,GAAyB,IAAzB;AACD;;AAED;AAAA;AACE;AACA;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEV;AAAjB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,GAAG,EAAEE,QAAZ;AAAsB,QAAA,IAAI,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAEI,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAFF;AAUD;;GAzCQP,G;;KAAAA,G;AA2CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport ToDoList from './Todolist';\nimport { v4 as uuidv4 } from 'uuid' // creates a random id for id handling\n\n//\n// This application builds a to-do list.\n//\n\nfunction App() {\n  // when our app loads, we have an empty [] of todos\n  // todos: every single one of our todos inside of our todo state\n  // setTodos: assigning a new value?\n  const [todos, setTodos] = useState([])\n\n  // making this a variable to access whatever you type in\n  const todoName = useRef() \n\n  const LOCAL_STORAGE_KEY = 'todoApp.'\n\n  // anytime anything in the array changes, the useEffect function gets called\n  useEffect(() => {\n    localStorage.setItem()\n  }, [todos])\n\n  // add a handler in app\n  function addHandler(e) {\n    // whatever element we are currently referencing in our input!\n\n    const name = todoName.current.value\n    if (name === '') return\n\n    setTodos(prevTodos => {\n      return [...prevTodos, { id: uuidv4(), name: name, complete: false}]\n    })\n\n    // clears out input when handler is finished\n    todoName.current.value = null\n  }\n\n  return (\n    // code fragment so that we can have multiple HTML elements inside the App.js return\n    <> \n      <ToDoList todos={todos}/>\n      <input ref={todoName} type=\"text\" />\n      <button onClick={addHandler}>Add ToDo</button>\n      <button>Clear Completed</button>\n      <div>0 left to do</div>\n    </>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}